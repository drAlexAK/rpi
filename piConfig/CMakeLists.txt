cmake_minimum_required(VERSION 3.15)
project(piConfig)

set(CMAKE_CXX_STANDARD 14)

FIND_PATH(CONFIG++_INCLUDE_DIR libconfig.h++ /usr/include /usr/local/include)
FIND_LIBRARY(CONFIG++_LIBRARY NAMES config++ PATH /usr/lib /usr/local/lib)

IF (CONFIG++_INCLUDE_DIR AND CONFIG++_LIBRARY)
    SET(CONFIG++_FOUND TRUE)
ENDIF ( CONFIG++_INCLUDE_DIR AND CONFIG++_LIBRARY)

IF (CONFIG++_FOUND)
    IF (NOT CONFIG++_FIND_QUIETLY)
        MESSAGE(STATUS "Found Config++: ${CONFIG++_LIBRARY}")
    ENDIF (NOT  CONFIG++_FIND_QUIETLY)
ELSE(CONFIG++_FOUND)
    IF (Config++_FIND_REQUIRED)
        IF(NOT CONFIG++_INCLUDE_DIR)
            MESSAGE(FATAL_ERROR "Could not find LibConfig++ header file!")
        ENDIF(NOT CONFIG++_INCLUDE_DIR)
        IF(NOT CONFIG++_LIBRARY)
            MESSAGE(FATAL_ERROR "Could not find LibConfig++ library file!")
        ENDIF(NOT CONFIG++_LIBRARY)
    ENDIF (Config++_FIND_REQUIRED)
ENDIF (CONFIG++_FOUND)

FIND_PATH(CONFIG_INCLUDE_DIR libconfig.h /usr/include /usr/local/include)
FIND_LIBRARY(CONFIG_LIBRARY NAMES config PATH /usr/lib /usr/local/lib)
IF (CONFIG_INCLUDE_DIR AND CONFIG_LIBRARY)
    SET(CONFIG_FOUND TRUE)
ENDIF ( CONFIG_INCLUDE_DIR AND CONFIG_LIBRARY)

IF (CONFIG_FOUND)
    IF (NOT CONFIG_FIND_QUIETLY)
        MESSAGE(STATUS "Found Config: ${CONFIG_LIBRARY}")
    ENDIF (NOT  CONFIG_FIND_QUIETLY)
ELSE(CONFIG_FOUND)
    IF (Config_FIND_REQUIRED)
        IF(NOT CONFIG_INCLUDE_DIR)
            MESSAGE(FATAL_ERROR "Could not find LibConfig header file!")
        ENDIF(NOT CONFIG_INCLUDE_DIR)

        IF(NOT CONFIG_LIBRARY)
            MESSAGE(FATAL_ERROR "Could not find LibConfig library file!")
        ENDIF(NOT CONFIG_LIBRARY)
    ENDIF (Config_FIND_REQUIRED)
ENDIF (CONFIG_FOUND)

add_executable(piConfig main.cpp piConfigLoader.cpp piConfigManager.cpp piConfigMotor.cpp piConfigCamera.cpp)
#add_executable(piConfig main.cpp piConfigLoader.h piConfigLoader.cpp piConfigBase.h piConfigMotor.h piConfigMotor.cpp piConfigCamera.cpp )

target_link_libraries(piConfig ${CONFIG++_LIBRARY})
target_link_libraries(piConfig ${CONFIG_LIBRARY})